{"ast":null,"code":"var _jsxFileName = \"/Users/abhishyant/Documents/Projects/Personal/songboard/client/src/content/board_view/board_view.tsx\";\nimport React from \"react\";\nimport SongCard from \"components/songcard/songcard\";\nimport AddSong from \"./add_song\";\nimport SectionHeader from \"./section_header\";\nimport API from \"../../__mocks__/api\";\nimport BoardControl from \"./board_control\";\n\nclass BoardView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      links: []\n    };\n    this.addLink = this.addLink.bind(this);\n    this.mapLinks = this.mapLinks.bind(this);\n    this.loadLinks = this.loadLinks.bind(this);\n    this.deleteLink = this.deleteLink.bind(this);\n    this.makeNewBoard = this.makeNewBoard.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadLinks();\n  }\n\n  componentWillReceiveProps(newProps) {\n    this.setState({\n      id: newProps.match.params.id\n    }, this.loadLinks);\n  }\n\n  loadLinks() {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      API.getBoard(that.state.id, \"\").then(board => {\n        that.setState({\n          links: board.links\n        }, resolve);\n      });\n    });\n  }\n\n  get links() {\n    return this.state.links;\n  }\n\n  get id() {\n    return this.state.id;\n  }\n\n  deleteLink(link) {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      API.deleteLinkFromBoard(that.state, link, \"\").then(response => {\n        return that.loadLinks();\n      }).then(() => {\n        resolve();\n      });\n    });\n  }\n\n  addLink(link) {\n    return API.addLinkToBoard(this.state.id, link, \"\").then(response => {\n      this.loadLinks();\n    });\n  }\n\n  makeNewBoard() {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      API.newBoard().then(response => that.setState({\n        id: response.message,\n        links: []\n      }, resolve));\n    });\n  }\n\n  saveBoard() {\n    var that = this;\n    return new Promise(function (resolve, reject) {\n      API.saveBoard(that.state).then(response => {\n        resolve();\n      });\n    });\n  }\n\n  mapLinks() {\n    return this.state.links.map(link => React.createElement(SongCard, {\n      key: link.url,\n      songlink: link,\n      deleteLink: this.deleteLink,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }));\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(SectionHeader, {\n      title: \"Board Name\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(BoardControl, {\n      newBoardFunc: this.makeNewBoard,\n      saveBoardFunc: this.saveBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"songs-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }, this.mapLinks()), React.createElement(AddSong, {\n      onPlusClick: this.addLink,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default BoardView;","map":{"version":3,"sources":["/Users/abhishyant/Documents/Projects/Personal/songboard/client/src/content/board_view/board_view.tsx"],"names":["React","SongCard","AddSong","SectionHeader","API","BoardControl","BoardView","Component","constructor","props","state","id","match","params","links","addLink","bind","mapLinks","loadLinks","deleteLink","makeNewBoard","componentDidMount","componentWillReceiveProps","newProps","setState","that","Promise","resolve","reject","getBoard","then","board","link","deleteLinkFromBoard","response","addLinkToBoard","newBoard","message","saveBoard","map","url","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { Board, URLTYPE, Link } from \"../../types\";\nimport SongCard from \"components/songcard/songcard\";\nimport AddSong from \"./add_song\";\nimport SectionHeader from \"./section_header\";\nimport API from \"../../__mocks__/api\";\nimport BoardControl from \"./board_control\";\nimport { RouteComponentProps } from \"react-router-dom\";\n\n/*\nContract\n  * requires\n  * ensures\n    * retrieves the stored links for the current board\n    * displays stored links in a responsive fashion\n    * handles deleting logic for links\n    * handles adding already validated links to the board \n*/\n\ninterface BoardMatch {\n  id: string;\n}\n\ninterface BoardViewProps extends RouteComponentProps<BoardMatch> {}\n\nclass BoardView extends React.Component<BoardViewProps, Board> {\n  constructor(props: BoardViewProps) {\n    super(props);\n    this.state = {\n      id: this.props.match.params.id,\n      links: []\n    };\n    this.addLink = this.addLink.bind(this);\n    this.mapLinks = this.mapLinks.bind(this);\n    this.loadLinks = this.loadLinks.bind(this);\n    this.deleteLink = this.deleteLink.bind(this);\n    this.makeNewBoard = this.makeNewBoard.bind(this);\n  }\n\n  componentDidMount() {\n    this.loadLinks();\n  }\n\n  componentWillReceiveProps(newProps: BoardViewProps) {\n    this.setState(\n      {\n        id: newProps.match.params.id\n      },\n      this.loadLinks\n    );\n  }\n\n  loadLinks(): Promise<void> {\n    var that = this;\n    return new Promise(function(resolve, reject) {\n      API.getBoard(that.state.id, \"\").then(board => {\n        that.setState(\n          {\n            links: board.links\n          },\n          resolve\n        );\n      });\n    });\n  }\n\n  get links(): Link[] {\n    return this.state.links;\n  }\n  get id(): string {\n    return this.state.id;\n  }\n\n  deleteLink(link: Link): Promise<void> {\n    var that = this;\n    return new Promise(function(resolve, reject) {\n      API.deleteLinkFromBoard(that.state, link, \"\")\n        .then(response => {\n          return that.loadLinks();\n        })\n        .then(() => {\n          resolve();\n        });\n    });\n  }\n\n  addLink(link: Link) {\n    return API.addLinkToBoard(this.state.id, link, \"\").then(response => {\n      this.loadLinks();\n    });\n  }\n\n  makeNewBoard(): Promise<void> {\n    var that = this;\n    return new Promise(function(resolve, reject) {\n      API.newBoard().then(response =>\n        that.setState(\n          {\n            id: response.message,\n            links: []\n          },\n          resolve\n        )\n      );\n    });\n  }\n\n  saveBoard(): Promise<void> {\n    var that = this;\n    return new Promise(function(resolve, reject) {\n      API.saveBoard(that.state).then(response => {\n        resolve();\n      });\n    });\n  }\n\n  mapLinks(): JSX.Element[] {\n    return this.state.links.map(link => (\n      <SongCard key={link.url} songlink={link} deleteLink={this.deleteLink} />\n    ));\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <SectionHeader title=\"Board Name\" />\n        </div>\n        <div>\n          <BoardControl\n            newBoardFunc={this.makeNewBoard}\n            saveBoardFunc={this.saveBoard}\n          />\n        </div>\n        <div className=\"songs-container\">{this.mapLinks()}</div>\n        <AddSong onPlusClick={this.addLink} />\n      </div>\n    );\n  }\n}\n\nexport default BoardView;\n"]},"metadata":{},"sourceType":"module"}