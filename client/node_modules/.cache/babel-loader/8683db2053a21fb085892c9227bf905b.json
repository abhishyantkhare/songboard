{"ast":null,"code":"var _jsxFileName = \"/Users/abhishyant/Documents/Projects/Personal/songboard/client/src/components/songframe/songframe.tsx\";\nimport React from \"react\";\nimport { URLTYPE } from \"types\";\nimport SpotifyFrame from \"components/spotifyframe/spotifyframe\";\nimport YoutubeFrame from \"components/youtubeframe/youtubeframe\";\nimport SoundcloudFrame from \"components/soundcloudframe/soundcloudframe\";\n/*\nContract\nrequire:\n  * a songLink of type Link with a valid url and a type of URLTYPE \nensure:\n  * Returns the correct frame for the type of url passed in\n    * URLTYPE.SPOTIFY - SpotifyFrame\n    * URLTYPE.YOUTUBE - YoutubeFrame\n    * URLTYPE.SOUNDCLOUD - SoundcloudFrame\n*/\n\nclass SongFrame extends React.Component {\n  render() {\n    return this.loadFromSongType();\n  }\n\n  loadFromSongType() {\n    if (this.props.songlink.urlType === URLTYPE.SPOTIFY) {\n      return React.createElement(SpotifyFrame, {\n        url: this.props.songlink.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      });\n    } else if (this.props.songlink.urlType === URLTYPE.YOUTUBE) {\n      return React.createElement(YoutubeFrame, {\n        url: this.props.songlink.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n    } else if (this.props.songlink.urlType === URLTYPE.SOUNDCLOUD) {\n      return React.createElement(SoundcloudFrame, {\n        url: this.props.songlink.url,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      });\n    }\n  }\n\n}\n\nexport default SongFrame;","map":{"version":3,"sources":["/Users/abhishyant/Documents/Projects/Personal/songboard/client/src/components/songframe/songframe.tsx"],"names":["React","URLTYPE","SpotifyFrame","YoutubeFrame","SoundcloudFrame","SongFrame","Component","render","loadFromSongType","props","songlink","urlType","SPOTIFY","url","YOUTUBE","SOUNDCLOUD"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,OAAT,QAA8B,OAA9B;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,YAAP,MAAyB,sCAAzB;AACA,OAAOC,eAAP,MAA4B,4CAA5B;AAEA;;;;;;;;;;;AAeA,MAAMC,SAAN,SAAwBL,KAAK,CAACM,SAA9B,CAAmD;AACjDC,EAAAA,MAAM,GAAG;AACP,WAAO,KAAKC,gBAAL,EAAP;AACD;;AAEDA,EAAAA,gBAAgB,GAAG;AACjB,QAAI,KAAKC,KAAL,CAAWC,QAAX,CAAoBC,OAApB,KAAgCV,OAAO,CAACW,OAA5C,EAAqD;AACnD,aAAO,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAE,KAAKH,KAAL,CAAWC,QAAX,CAAoBG,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFD,MAEO,IAAI,KAAKJ,KAAL,CAAWC,QAAX,CAAoBC,OAApB,KAAgCV,OAAO,CAACa,OAA5C,EAAqD;AAC1D,aAAO,oBAAC,YAAD;AAAc,QAAA,GAAG,EAAE,KAAKL,KAAL,CAAWC,QAAX,CAAoBG,GAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAFM,MAEA,IAAI,KAAKJ,KAAL,CAAWC,QAAX,CAAoBC,OAApB,KAAgCV,OAAO,CAACc,UAA5C,EAAwD;AAC7D,aAAO,oBAAC,eAAD;AAAiB,QAAA,GAAG,EAAE,KAAKN,KAAL,CAAWC,QAAX,CAAoBG,GAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD;AACF;;AAbgD;;AAgBnD,eAAeR,SAAf","sourcesContent":["import React from \"react\";\nimport { URLTYPE, Link } from \"types\";\nimport SpotifyFrame from \"components/spotifyframe/spotifyframe\";\nimport YoutubeFrame from \"components/youtubeframe/youtubeframe\";\nimport SoundcloudFrame from \"components/soundcloudframe/soundcloudframe\";\n\n/*\nContract\nrequire:\n  * a songLink of type Link with a valid url and a type of URLTYPE \nensure:\n  * Returns the correct frame for the type of url passed in\n    * URLTYPE.SPOTIFY - SpotifyFrame\n    * URLTYPE.YOUTUBE - YoutubeFrame\n    * URLTYPE.SOUNDCLOUD - SoundcloudFrame\n*/\n\ntype Props = {\n  songlink: Link;\n};\n\nclass SongFrame extends React.Component<Props, {}> {\n  render() {\n    return this.loadFromSongType();\n  }\n\n  loadFromSongType() {\n    if (this.props.songlink.urlType === URLTYPE.SPOTIFY) {\n      return <SpotifyFrame url={this.props.songlink.url} />;\n    } else if (this.props.songlink.urlType === URLTYPE.YOUTUBE) {\n      return <YoutubeFrame url={this.props.songlink.url} />;\n    } else if (this.props.songlink.urlType === URLTYPE.SOUNDCLOUD) {\n      return <SoundcloudFrame url={this.props.songlink.url} />;\n    }\n  }\n}\n\nexport default SongFrame;\n"]},"metadata":{},"sourceType":"module"}