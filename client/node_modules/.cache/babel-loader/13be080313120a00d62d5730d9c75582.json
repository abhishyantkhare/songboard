{"ast":null,"code":"import { URLTYPE } from \"../types\";\nvar boards = [{\n  id: \"0\",\n  links: [{\n    url: \"https://open.spotify.com/embed/track/5JtPGzRgrWxkXX9LoROq3d\",\n    urlType: URLTYPE.SPOTIFY\n  }, {\n    url: \"https://www.youtube.com/embed/miJAfs7jhak\",\n    urlType: URLTYPE.YOUTUBE\n  }, {\n    url: \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/591147435&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true\",\n    urlType: URLTYPE.SOUNDCLOUD\n  }]\n}];\n\nclass API {\n  /*\n  Contract\n    *requires:\n      *board id\n      *link\n    *ensures:\n      *if valid id and link, link gets sent in POST request to backend & returns success\n      *returns error if server has error\n   */\n  static addLinkToBoard(board_id, link, session_token) {\n    return new Promise(function (resolve, reject) {\n      let board = boards.find(b => b.id == board_id);\n      board.links.push(link);\n      let response = {\n        success: true,\n        message: \"POST successful\"\n      };\n      resolve(response);\n    });\n  }\n\n  static getBoard(board_id, session_token) {\n    return new Promise(function (resolve, reject) {\n      resolve(boards[parseInt(board_id)]);\n    });\n  }\n\n  static newBoard() {\n    return new Promise(function (resolve, reject) {\n      var id = String(boards.length);\n      let board = {\n        id: id,\n        links: []\n      };\n      boards.push(board);\n      let response = {\n        success: true,\n        message: id\n      };\n      resolve(response);\n    });\n  }\n\n  static saveBoard(board) {\n    return new Promise(function (resolve, reject) {\n      let board_ind = boards.findIndex(b => b.id == board.id);\n      boards[board_ind] = board;\n      let response = {\n        success: true,\n        message: board.id\n      };\n      resolve(response);\n    });\n  }\n\n  static deleteLinkFromBoard(board, link, session_token) {\n    return new Promise(function (resolve, reject) {\n      let board_ind = boards.findIndex(b => b.id == board.id);\n      boards[board_ind].links = board.links.filter(l => l.url != link.url);\n      let response = {\n        success: true,\n        message: link.url\n      };\n      resolve(response);\n    });\n  }\n\n}\n\nAPI.BASE_URL = \"http://localhost:3005/\";\nexport default API;","map":{"version":3,"sources":["/Users/abhishyant/Documents/Projects/Personal/songboard/client/src/__mocks__/api.ts"],"names":["URLTYPE","boards","id","links","url","urlType","SPOTIFY","YOUTUBE","SOUNDCLOUD","API","addLinkToBoard","board_id","link","session_token","Promise","resolve","reject","board","find","b","push","response","success","message","getBoard","parseInt","newBoard","String","length","saveBoard","board_ind","findIndex","deleteLinkFromBoard","filter","l","BASE_URL"],"mappings":"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","sourcesContent":["import { Link, POSTResponse, Board, URLTYPE } from \"../types\";\n\nvar boards: Board[] = [\n  {\n    id: \"0\",\n    links: [\n      {\n        url: \"https://open.spotify.com/embed/track/5JtPGzRgrWxkXX9LoROq3d\",\n        urlType: URLTYPE.SPOTIFY\n      },\n      {\n        url: \"https://www.youtube.com/embed/miJAfs7jhak\",\n        urlType: URLTYPE.YOUTUBE\n      },\n      {\n        url:\n          \"https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/591147435&color=%23ff5500&auto_play=false&hide_related=false&show_comments=true&show_user=true&show_reposts=false&show_teaser=true&visual=true\",\n        urlType: URLTYPE.SOUNDCLOUD\n      }\n    ]\n  }\n];\n\nclass API {\n  static readonly BASE_URL: string = \"http://localhost:3005/\";\n  /*\n  Contract\n    *requires:\n      *board id\n      *link\n    *ensures:\n      *if valid id and link, link gets sent in POST request to backend & returns success\n      *returns error if server has error\n\n  */\n  static addLinkToBoard(\n    board_id: string,\n    link: Link,\n    session_token: string\n  ): Promise<POSTResponse> {\n    return new Promise(function(resolve, reject) {\n      let board: Board = boards.find((b: Board) => b.id == board_id)!;\n      board.links.push(link);\n      let response: POSTResponse = {\n        success: true,\n        message: \"POST successful\"\n      };\n      resolve(response);\n    });\n  }\n  static getBoard(board_id: string, session_token: string): Promise<Board> {\n    return new Promise(function(resolve, reject) {\n      resolve(boards[parseInt(board_id)]);\n    });\n  }\n\n  static newBoard(): Promise<POSTResponse> {\n    return new Promise(function(resolve, reject) {\n      var id = String(boards.length);\n      let board = {\n        id: id,\n        links: []\n      };\n      boards.push(board);\n      let response: POSTResponse = {\n        success: true,\n        message: id\n      };\n      resolve(response);\n    });\n  }\n\n  static saveBoard(board: Board): Promise<POSTResponse> {\n    return new Promise(function(resolve, reject) {\n      let board_ind = boards.findIndex((b: Board) => b.id == board.id)!;\n      boards[board_ind] = board;\n      let response: POSTResponse = {\n        success: true,\n        message: board.id\n      };\n      resolve(response);\n    });\n  }\n\n  static deleteLinkFromBoard(\n    board: Board,\n    link: Link,\n    session_token: string\n  ): Promise<POSTResponse> {\n    return new Promise(function(resolve, reject) {\n      let board_ind = boards.findIndex((b: Board) => b.id == board.id)!;\n      boards[board_ind].links = board.links.filter(l => l.url != link.url);\n      let response: POSTResponse = {\n        success: true,\n        message: link.url\n      };\n      resolve(response);\n    });\n  }\n}\n\nexport default API;\n"]},"metadata":{},"sourceType":"module"}